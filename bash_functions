#!/bin/bash -x

function me {
  echo $LOGNAME
}

export -f me

function timestamp {

  date +%F-%T
}

export -f timestamp

function refresh {

 . ~/.bashrc
}

export refresh

function funcs {

   echo ~/bin/bash_functions
}

export -f funcs


function aliases {

   echo ~/.bash_aliases
}

export -f aliases


function algo4_setenv {
if [ ! -z $CLASSPATH ]; then
    echo "CLASSPATH=$CLASSPATH      Not Empty"
    export CLASSPATH="$CLASSPATH:~/Downloads/classes/algoritms/algs4.jar"
  else
    echo "CLASSPATH=$CLASSPATH      Empty"
    export CLASSPATH='.:~/Downloads/classes/algoritms/algs4.jar'
  fi
}

export -f algo4_setenv

function java_setenv {
    export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
    export PATH=$JAVA_HOME/bin:$PATH
    export HADOOP_CLASSPATH=$JAVA_HOME/lib/tools.jar
}

export -f java_setenv

function find_all_modules {

   for i in `find /sys/ -name modalias -exec cat {} \;` ; do
      /sbin/modprobe --config /dev/null --show-depends $i ;
      done | rev | cut -f 1 -d '/' | rev | sort -u
}

export -f find_all_modules

function killadb {

  adb kill-server
}

export -f killadb

function adb_devices {

  adb devices | grep -v 'List of devices attached'| sed 's/\t/_/g' | cut -d '_' -f1
}

export -f adb_devices

function fb_devices {

  fastboot devices | cut -f1
#  echo "fastboot devices | grep -vE 'finished|waiting|Done|OKAY|\.\.\.' | sed 's/\t/_/g' | cut -d '_' -f1 "

}

export -f fb_devices

function root {
   adb root
   adb wait-for-devices
}   

export -f root

function hello() {
   echo "Hello, $1!"
}

export -f hello

function mymenu() {
  my_menu.py

}

export -f mymenu

function typetest() {

 message="$2$1$3"
 hello $message
 Type $message
}

export -f typetest

function logcat() {
  adb logcat $*
}

export -f logcat

function untar () {
   tar -xzf $*
}

export -f untar

function flash_it() {
if [ ! -n "$1" ]; then 
    guess=`ls -1trF fastboot*.tar.gz | tail -1`
    folder=`echo $guess | sed 's/fastboot.//' | sed 's/\.tar\.gz//'`
else
  folder=$1;
fi
echo $folder
test -d $folder && pushd $folder
arch=fastboot?$folder\.tar\.gz
echo $arch
echo "untar $arch"
untar $arch
# test -e $arch && tar -zxf $arch && printf "\a"
echo "prepare to flash $folder"
test -d $folder && pushd $folder
}

export -f flash_it

function get_keys_version (){

keys='serialno|version|keys|ro.boot|MBM-NG-V|fingerprint'
devices=`fb_devices`
if [ ! -z "$devices" ] ; then
   getvar | grep -iE $keys 
fi
devices=`adb_devices`
  for device in $devices ; do
    echo serialno: $device
    adb -s $device shell getprop | grep -iE $keys;
    echo
  done
}

export -f get_keys_version

export BP_vers="M8994_1236|M8994_1233|MDM9625_|ONEBIN_BP_|ULTRA_M_BP_|ULTRA_BP_|9615_|msm8960bp_|vanquish_bp_|qinara_bp_|asanti_bp_|SASQUATCH_BP_|MSM8960PROBP_|MSM8960PRO_BP_"

function get_ver () {
   strings -a NON-HLOS.bin | grep -iE $BP_vers | grep -v mdm
}

export -f get_ver

function Type ( ) {
    echo $1
    adb shell input text $1

}

export -f Type


function echo_if_dir {
  if [ -d $1 ] ; then echo $1
  fi
}

function ltr {

if [ -n "$1" ] ; then
  for file in $* ; do echo_if_dir $file ; ls -ltr $file ;done |tail
else
  ls -ltr 
fi
}

export -f ltr

function flsrt () {

if [ -n "$1" ] ; then
  for file in $* ; do echo_if_dir $file ; ls -lSrF $file | grep / ; done |tail
else
  ls -lSrF  | grep / | tail
fi

}

export -f flsrt

function lsrt {

  ls -Srl $* | tail
}

export -f lsrt

function ltrh () {

if [ -n "$1" ] ; then
  for file in $* ; do echo_if_dir $file ; ls -ltrF $file ; done | head
else
  ls -ltrF | head
fi

}

export -f ltrh

function ltrt () {

if [ -n "$1" ] ; then
  for file in $* ; do echo_if_dir $file ; ls -ltrF $file ; done | tail
else
  ls -ltrF | tail
fi

}

export -f ltrt

function fltrh () {

if [ -n "$1" ] ; then
  for file in $* ; do echo_if_dir $file ; ls -ltrF $file | grep / ; done | head 
else
  ls -ltrF  | grep / | head
fi

}

export -f fltrh

function fltr () {

if [ -n "$1" ] ; then
  for file in $* ; do echo_if_dir $file ; ls -ltrF $file | grep / ; done
else
  ls -ltrF  | grep /
fi

}

export -f fltr

function fltrt () {

if [ -n "$1" ] ; then
  for file in $* ; do echo_if_dir $file ; ls -ltrF $file | grep / ; done | tail 
else
  ls -ltrF  | grep / | tail
fi

}

export -f fltrt


function getvar () {

for d in `fb_devices` ; do 
  echo serialno: $d
  if [ -n "$1" ] ; then
    fastboot -s $d getvar $* 2>&1
  else
    fastboot -s $d getvar all 2>&1
  fi
  echo
done

}

export -f getvar

function scream {

  mplayer ~/Downloads/Wilhelm_Scream.ogg > /dev/null 2>&1

}

export -f scream

function show_image() {

  python  ~/bin/show_image.py -q -i $1

}

export -f show_image

function newest () {

ls -t $($*) | head -1

}

export -f newest 

function save_partition() {

if [ -n "$2" ] ; then
  device=$1
  partition=$2
  echo $1 $2
  `fastboot -s $device oem partition dump $partition`
  mv $partition.img "$device.$partition.img"
else
  echo 'Usage: save_partition <serial_number> <partition_name>'
fi
}

export -f save_partition

function save_devs() {
  for device in `fb_devices` ; 
    do mkdir -p $device &&  pushd $device && save_dev $device && popd ; done
}

export -f save_devs

function erase_data () {
  if [ -n "$1" ] ; then fastboot -s $1 -w
  fi
}

export -f erase_data

function erase_devs {
  for device in `fb_devices` ; do erase_data $device ;done
}

export -f erase_devs

function factory_upgrade {

   save_devs && \
   for device in `fb_devices` ; do erase_data $device ; done && \
   if [ -e flashall.sh ] ; then flashall.sh ; fi
}

export -f factory_upgrade

function conf_call () {
  dial="$1\;$2\#"
  echo "$1;$2#"
  Type $dial
}

